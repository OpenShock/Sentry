@using System.Net.Http.Json
@using System.Runtime.InteropServices
@using Microsoft.Extensions.Logging
@using OneOf.Types
@using OpenShock.SDK.CSharp.Models
@using OpenShock.SDK.CSharp.Utils
@using OpenShock.Sentry.Backend
@using OpenShock.Sentry.Config
@using OpenShock.Sentry.Utils

@inject ConfigManager ConfigManager
@inject OpenShockApi ApiClient
@inject ISnackbar Snackbar
@inject ILogger<LoginPart> Logger

<div class="d-flex">
<MudButton Class="get-token-button" Style="width: 1000px; height:  100px; font-size: 2rem" Variant="Variant.Filled" Color="Color.Primary" OnClick="GetToken">Login with OpenShock</MudButton>
</div>
<br/>
<br/>
<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="flex-direction: column">
    <div>
        @if (_advancedSettingsExpanded)
        {
            <MudButton OnClick="OnAdvancedSettingsClick" EndIcon="@Icons.Material.Filled.KeyboardArrowUp">Advanced Settings</MudButton>
        }
        else
        {
            <MudButton OnClick="OnAdvancedSettingsClick" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">Advanced Settings</MudButton>
        }
    </div>

    <MudCollapse Expanded="_advancedSettingsExpanded">
        @if (!_useCustomServerDialog)
        {
            <MudSelect T="BackendServer" Label="Server" @bind-Value="Server" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="BackendServer" Value="BackendServer.Production"><span class="server-url-backdrop">https://api.openshock.app/</span> (Production)</MudSelectItem>
                <MudSelectItem T="BackendServer" Value="BackendServer.Staging"><span class="server-url-backdrop">https://api-staging.openshock.app/</span> (Staging)</MudSelectItem>
                @if (_customServerUri != null)
                {
                    <MudSelectItem T="BackendServer" Value="BackendServer.Custom"><span class="server-url-backdrop">@_customServerUri</span> (Custom)</MudSelectItem>
                }
            </MudSelect>

            <br/>
            <MudButton OnClick="() => _useCustomServerDialog = true" Color="Color.Primary">Use custom server</MudButton>
        }
        else
        {
            <MudTextField @bind-Value="_server" Error="@ValidateCustomServerBool()" Label="Custom Server" Variant="Variant.Outlined"></MudTextField>
            <br/>

            <MudButton OnClick="() => _useCustomServerDialog = false" Variant="Variant.Filled" Color="Color.Primary">Back</MudButton>
            <MudButton OnClick="SaveCustomServer" Variant="Variant.Filled" Color="Color.Primary" Disabled="@ValidateCustomServerBool()">Save</MudButton>
        }
        
        <br/>
        <MudTextField @bind-Value="ConfigManager.Config.OpenShock.Token" Label="API Token" Variant="Variant.Outlined"></MudTextField>
        <br/>
        <MudButton OnClick="Login" Color="Color.Primary">Continue with Token</MudButton>
    </MudCollapse>

</MudPaper>

<style>
    .server-url-backdrop {
        background-color: rgba(66, 66, 66, 1);
        border-radius: 5px;
    }
    
    .get-token-button {
        margin-top: 8px;
        margin-bottom: 2px;
        margin-right: 10px;
    }
</style>

@code {
    private bool _useCustomServerDialog = false;

    private bool _advancedSettingsExpanded = false;

    private string? _server = null;

    [Parameter] public required Func<Task> ProceedAuthenticated { get; set; }

    public async Task Login()
    {
        await ConfigManager.SaveAsync();
        await ProceedAuthenticated();
    }

    private bool ValidateCustomServerBool() => !ValídateCustomServer().IsT0;

    private OneOf.OneOf<Success<Uri>, StringIsNull, UriIsNotValid> ValídateCustomServer()
    {
        if (string.IsNullOrEmpty(_server)) return new StringIsNull();
        if (Uri.TryCreate(_server, UriKind.Absolute, out var uri))
        {
            if (uri.Scheme != "http" && uri.Scheme != "https") return new UriIsNotValid();
            return new Success<Uri>(uri);
        }

        return new UriIsNotValid();
    }

    private void SaveCustomServer()
    {
        var validation = ValídateCustomServer();
        if (validation.IsT0)
        {
            _customServerUri = validation.AsT0.Value;
            Server = BackendServer.Custom;
            _useCustomServerDialog = false;
        }
    }


    private void OnAdvancedSettingsClick()
    {
        _advancedSettingsExpanded = !_advancedSettingsExpanded;
    }

    private enum BackendServer
    {
        Production,
        Staging,
        Custom
    }

    private Uri? _customServerUri = null;

    private BackendServer Server
    {
        get => ConfigManager.Config.OpenShock.Backend.ToString() switch
        {
            ProductionServerString => BackendServer.Production,
            StagingServerString => BackendServer.Staging,
            _ => BackendServer.Custom
        };
        set => ConfigManager.Config.OpenShock.Backend = value switch
        {
            BackendServer.Production => _productionServer,
            BackendServer.Staging => _stagingServer,
            BackendServer.Custom => _customServerUri,
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, null)
        } ?? throw new InvalidOperationException();
    }

    private struct WrongSchema;

    private struct StringIsNull;

    private struct UriIsNotValid;

    private const string ProductionServerString = "https://api.openshock.app/";
    private const string StagingServerString = "https://staging-api.openshock.app/";

    private static Uri _productionServer = new(ProductionServerString);
    private static Uri _stagingServer = new(StagingServerString);

    protected override void OnInitialized()
    {
        if (Server == BackendServer.Custom) _customServerUri = ConfigManager.Config.OpenShock.Backend;
    }

    private async Task GetToken()
    {
        Logger.LogTrace("Get API info");
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Add("User-Agent", "OpenShock.Sentry-Internal/1.0");
        httpClient.BaseAddress = ConfigManager.Config.OpenShock.Backend;
        var response = await httpClient.GetAsync("1");
        if (!response.IsSuccessStatusCode)
        {
            Logger.LogError("Failed to reach API, status code: {StatusCode}", response.StatusCode);
            Snackbar.Add("Failed to reach API", Severity.Error);
            return;
        }
        
        var root = await response.Content.ReadFromJsonAsync<BaseResponse<RootResponse>>();
        
        if (root == null)
        {
            Snackbar.Add("Failed to reach API", Severity.Error);
            return;
        }
        
        Logger.LogTrace("Open browser for token");

        var requestUri = new Uri(root.Data!.ShortLinkUrl, "/t/?name=Sentry&redirect_uri=openshock-sentry:token/%&permissions=shockers.use");
        UiUtils.OpenUrl(requestUri.ToString());
    }
    
    private string GetUserAgent()
    {
        var sentryVersion = GetType().Assembly.GetName().Version!;
        

        var runtimeVersion = RuntimeInformation.FrameworkDescription;
        if (string.IsNullOrEmpty(runtimeVersion)) runtimeVersion = "Unknown Runtime";

        return
            $"OpenShock.Sentry/{sentryVersion.Major}.{sentryVersion.Minor}.{sentryVersion.Build} " +
            $"({runtimeVersion}; {UserAgentUtils.GetOs()}; sentryInternals)";
    }

    public sealed class RootResponse
    {
        public required string Version { get; set; }
        public required string Commit { get; set; }
        public required DateTimeOffset CurrentTime { get; set; }
        public required Uri FrontendUrl { get; set; }
        public required Uri ShortLinkUrl { get; set; }
    }
    
}