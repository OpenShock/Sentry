@using Microsoft.Extensions.Logging
@using OpenShock.Sentry.Config
@using OpenShock.Sentry.Services
@using OpenShock.Sentry.Services.Pipes
@inject ConfigManager ConfigManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject PipeServerService PipeService
@layout NotAuthedLayout
@inherits LayoutComponentBase
@inject ILogger<Authenticate> Logger

@page "/"

<MudContainer Class="align-content-center" MaxWidth="MaxWidth.Small" Style="padding-top: 30px">
    <MudPaper Class="rounded-lg" Elevation="0" Style="padding: 20px; text-align: center;" Outlined="true">

        <MudContainer Class="d-flex" Style="padding: 0">
            <MudImage Src="images/Icon.svg" Alt="Logo" Width="75" Height="75" Class="ma-4" Style="vertical-align: bottom;"/>
            <MudText Class="d-inline-block flex-grow-1 pa-0" Style="font-size: 5em;">Sentry</MudText>
        </MudContainer>
        
        <div style="margin-top: 20px;">
        
        @switch (_currentState)
        {
            case State.Login:
                <LoginPart ProceedAuthenticated="ProceedAuthenticated"/>
                break;
            case State.Loading:
                <MudProgressCircular Color="Color.Primary" Style="height:125px;width:125px;" Indeterminate="true"/>
                break;
            case State.Failed:
                <MudText Typo="Typo.h6">Failed to authenticate</MudText>
                <MudButton OnClick="ReLogin" Variant="Variant.Filled" Color="Color.Primary">Re-login</MudButton>
                break;
            case State.Authenticated:
                <MudText Typo="Typo.h6">Successful, redirecting...</MudText>
                break;
        }
        </div>
    </MudPaper>
</MudContainer>

@code {

    private enum State
    {
        Login,
        Loading,
        Authenticated,
        Failed
    }

    private State _currentState = State.Login;

    protected override void OnInitialized()
    {
        if(AuthService.Authenticated) NavigationManager.NavigateTo("dash/dashboard");
    }

    protected override async Task OnInitializedAsync()
    {
        if (await CheckTokenReceived()) return;
        
        PipeService.OnMessageReceived += CheckTokenReceived;
        
        if (string.IsNullOrEmpty(ConfigManager.Config.OpenShock.Token)) return;
        await ProceedAuthenticated();
    }

    private async Task<bool> CheckTokenReceived()
    {
        if (string.IsNullOrEmpty(PipeService.Token) || _currentState != State.Login) return false;
        ConfigManager.Config.OpenShock.Token = PipeService.Token;
        await ConfigManager.SaveAsync();
        PipeService.Token = null;
        await ProceedAuthenticated();
        return true;
    }

    public void ReLogin()
    {
        _currentState = State.Login;
    }

    private async Task ProceedAuthenticated()
    {
        _currentState = State.Loading;
        await InvokeAsync(StateHasChanged);

        try
        {
            await AuthService.Authenticate();

            _currentState = State.Authenticated;
            await InvokeAsync(StateHasChanged);

            NavigationManager.NavigateTo("dash/dashboard");
        }
        catch (Exception e)
        {
            _currentState = State.Failed;
            await InvokeAsync(StateHasChanged);
            Logger.LogError(e, "Failed to authenticate");
            Snackbar.Add("Failed to authenticate", Severity.Error);
        }
    }

}