@using OpenShock.Sentry.Config
@using OpenShock.Sentry.Services
@inject ConfigManager ConfigManager
@inject Updater Updater
@implements IDisposable

@page "/dash/appsettings"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding">
    <MudText>Sentry App</MudText>
    <MudDivider/>

    <div class="d-flex gap-5" style="align-items: center">

        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.App.CloseToTray" Label="Close to Tray" @bind-Value:after="OnSettingsValueChange"/>

        <div style="width: 200px">
            <MudSelect Disabled="Updater.CheckingForUpdate.Value" Variant="Variant.Outlined" @bind-Value="ConfigManager.Config.App.UpdateChannel" Label="Update Channel" @bind-Value:after="UpdateChannelChanged">
                @foreach (UpdateChannel channel in Enum.GetValues(typeof(UpdateChannel)))
                {
                    <MudSelectItem Value="@channel">@channel</MudSelectItem>
                }
            </MudSelect>
        </div>

        @if (Updater.CheckingForUpdate.Value)
        {
            <MudTooltip Text="Checking for updates...">
                <MudProgressCircular Style="margin-top: 10px" Color="Color.Primary" Indeterminate="true"/>
            </MudTooltip>
        }
    </div>
</MudPaper>

@code {

    protected override void OnInitialized()
    {
        Updater.CheckingForUpdate.OnValueChanged += OnCheckingForUpdateChange;
    }

    private void OnCheckingForUpdateChange(bool value)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnSettingsValueChange()
    {
        await ConfigManager.SaveAsync();
    }

    private async Task UpdateChannelChanged()
    {
        await OnSettingsValueChange();
        await Updater.CheckUpdate();
    }

    public void Dispose()
    {
        Updater.CheckingForUpdate.OnValueChanged -= OnCheckingForUpdateChange;
    }

}