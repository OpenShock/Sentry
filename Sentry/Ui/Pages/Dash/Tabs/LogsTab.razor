@using OpenShock.Sentry.Logging
@using OpenShock.Sentry.Utils
@using Serilog.Events
@implements IDisposable

@page "/dash/logs"

<MudTable T="LogStore.LogEntry" RowClass="cursor-pointer" RowClassFunc="RowClassFunc" Items="LogStore.Logs.OrderByDescending(x => x.Time)" OnRowClick="LogRowClick" Breakpoint="Breakpoint.Sm" Hover="true" Dense="true" Height="100%">
    <HeaderContent>
        <MudTh>Time</MudTh>
        <MudTh>Level</MudTh>
        <MudTh>Source</MudTh>
        <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Time.ToString("HH:mm:ss")</MudTd>
        <MudTd>@context.Level.ToString()</MudTd>
        <MudTd>@context.SourceContextShort</MudTd>
        <MudTd>@context.Message.TruncateAtChar(120)</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.IsExpanded)
        {
            <MudTr>
                <td colspan="3" style="padding: 0 10px">

                    <br/>
                    <MudTextField ReadOnly Class="option-width" Variant="Variant.Filled" Value="@context.Time.ToString("HH:mm:ss")" Label="Time"></MudTextField>
                    <MudTextField ReadOnly Class="option-width" Variant="Variant.Filled" Value="@context.Level" Label="Level"></MudTextField>
                    <MudTextField Style="width: 370%" ReadOnly Class="option-width" Variant="Variant.Filled" AutoGrow="true" Value="@context.SourceContext" Label="Source Context"></MudTextField>

                    <br/>
                    <br/>
                    @* HACK, thank you html tables *@
                    <div style="width: calc(100vw - 335px)">
                        <CodeBlock Value="@context.Message"/>
                    </div>
                    <br/>
                    <br/>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code {
    private string GetLogClass(LogEventLevel level)
        => $"log {level.ToString().ToLowerInvariant()}";

    private void LogRowClick(TableRowClickEventArgs<LogStore.LogEntry> rowClickEventArgs)
    {
        if(rowClickEventArgs.Item == null) return;
        rowClickEventArgs.Item.IsExpanded = !rowClickEventArgs.Item.IsExpanded;
    }
    
    private string RowClassFunc(LogStore.LogEntry? log, int arg2) =>
        log == null ? string.Empty : GetLogClass(log.Level) + (log.IsExpanded ? " expanded" : "");

    protected override void OnInitialized()
    {
        LogStore.OnLogAdded = OnLogAdded;
    }

    private void OnLogAdded()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LogStore.OnLogAdded = null;
    }

}

<style>
    .log.fatal {
        background: linear-gradient(180deg, rgba(2,0,36,0) 0%, rgba(121,9,9,0) 58%, rgba(255,0,0,0.4247899843531162) 100%);
    }
    .log.error {
        background: linear-gradient(180deg, rgba(2,0,36,0) 0%, rgba(121,19,9,0) 58%, rgba(255,44,0,0.4247899843531162) 100%);
    }
    .log.warning {
        background: linear-gradient(180deg, rgba(2,0,36,0) 0%, rgba(118,121,9,0) 58%, rgba(255,254,0,0.42) 100%);
    }
    
    .expanded {
        background: rgba(0,0,0,0.32);
    }
    
    .expanded:hover {
            background: rgba(0,0,0,0.4) !important;
    }
</style>